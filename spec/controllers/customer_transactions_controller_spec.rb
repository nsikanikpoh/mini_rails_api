require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe Api::V1::CustomerTransactionsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Post. As you add validations to Post, be sure to
  # adjust the attributes here as well.
  let!(:user_transaction) { create(:customer_transaction) }


    describe "GET #index" do
      it 'gets all transactions' do
          get :index
          expect(response).to have_http_status(:success)
      end
    end

    describe "GET #show" do
      it 'shows the gets post with id' do
          get :show, params: { id: user_transaction.id }
          json = JSON.parse(response.body)
          expect(json['in_currency']).to eq(user_transaction.in_currency)
          expect(json['out_currency']).to eq(user_transaction.out_currency)
          expect(json['in_amount']).to eq(user_transaction.in_amount.to_s)
          expect(json['out_amount']).to eq(user_transaction.out_amount.to_s)
          expect(json['identifier']).to eq(user_transaction.identifier)
          expect(json['customer_id']).to eq(user_transaction.customer_id)
          expect(response).to have_http_status(:success)
      end
    end

    describe 'POST #create' do

      describe 'when new customer_transaction info is valid' do


        it 'creates the new customer_transaction' do
            post :create, params: { transaction: { currency: 'CAD', amount: 124, customer_id:3, transaction_date: "2022-05-19"} }
          expect(CustomerTransaction.first.in_currency).to eq 'CAD'
          expect(response).to have_http_status(:created)
        end
      end

      describe 'when new customer_transaction request does not have any currency' do
        it 'does NOT create a new customer_transaction' do
          expect{post :create, params: { transaction: { currency: '', amount: 124, customer_id:3, transaction_date: "2022-05-19" } }}.to change{CustomerTransaction.count}.by(0)
          expect(response).to have_http_status(:bad_request)
        end
      end

   end


end
